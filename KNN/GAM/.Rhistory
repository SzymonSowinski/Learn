ilosc_miejsc_ = 12
dont(wynik = wynik_,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_)
# wynik_ = c(42,26,10,10,8)
wynik_ = c(42,30,10,10,8)
nazwy_ = c("PiS", "PO", "3D", "L", "Konf")
ilosc_miejsc_ = 12
dont(wynik = wynik_,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_)
# wynik_ = c(42,26,10,10,8)
wynik_ = c(42,26,14,10,8)
nazwy_ = c("PiS", "PO", "3D", "L", "Konf")
ilosc_miejsc_ = 12
dont(wynik = wynik_,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_)
ilosc_miejsc_ = 10
dont(wynik = wynik_,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_)
ilosc_miejsc_ = 12
dont(wynik = wynik_,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_)
ww = tibbe()
ww
ww = tibbe()
ww = tibble()
for (i in 1:100){
for (i in 1:100){
ww = ww %>%
bind_rows(dont(wynik = wynik_,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_))
}
ww = tibble()
wynik_ = c(42,26,10,10,8)
nazwy_ = c("PiS", "PO", "3D", "L", "Konf")
ilosc_miejsc_ = 12
for (i in 1:100){
ww = ww %>%
bind_rows(dont(wynik = wynik_,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_))
}
ww
ww = tibble()
wynik_ = c(42,26,10,10,8)
nazwy_ = c("PiS", "PO", "3D", "L", "Konf")
ilosc_miejsc_ = 12
for (i in 1:100){
wynik_1 = wynik_ + rnorm(length(wynik_), sd = 0.1)
ww = ww %>%
bind_rows(dont(wynik = wynik_1,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_))
}
ww
ww %>%
group_by(nazwy) %>%
summarise(sd = sd(n))
for (i in 1:100){
wynik_1 = wynik_ + rnorm(length(wynik_), sd = 1)
ww = ww %>%
bind_rows(dont(wynik = wynik_1,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_))
}
ww %>%
group_by(nazwy) %>%
summarise(sd = sd(n))
# wynik_ = c(42,26,10,10,8) #ZW
wynik_ = c(29,38,9,12,9) #Wr
nazwy_ = c("PiS", "PO", "3D", "L", "Konf")
# ilosc_miejsc_ = 12 #ZW
ilosc_miejsc_ = 14 #ZWr
for (i in 1:100){
wynik_1 = wynik_ + rnorm(length(wynik_), sd = 1)
ww = ww %>%
bind_rows(dont(wynik = wynik_1,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_))
}
ww %>%
group_by(nazwy) %>%
summarise(sd = sd(n))
for (i in 1:100){
wynik_1 = wynik_ + rnorm(length(wynik_), sd = 0.5)
ww = ww %>%
bind_rows(dont(wynik = wynik_1,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_))
}
ww %>%
group_by(nazwy) %>%
summarise(sd = sd(n))
for (i in 1:100){
wynik_1 = wynik_ + rnorm(length(wynik_), sd = 0.1)
ww = ww %>%
bind_rows(dont(wynik = wynik_1,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_))
}
ww %>%
group_by(nazwy) %>%
summarise(sd = sd(n))
ww
ww = tibble()
# wynik_ = c(42,26,10,10,8) #ZW
wynik_ = c(29,38,9,12,9) #Wr
nazwy_ = c("PiS", "PO", "3D", "L", "Konf")
# ilosc_miejsc_ = 12 #ZW
ilosc_miejsc_ = 14 #ZWr
for (i in 1:100){
wynik_1 = wynik_ + rnorm(length(wynik_), sd = 0.1)
ww = ww %>%
bind_rows(dont(wynik = wynik_1,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_))
}
ww %>%
group_by(nazwy) %>%
summarise(sd = sd(n))
wynik_1 = wynik_ + rnorm(length(wynik_), sd = 1)
ww = tibble()
# wynik_ = c(42,26,10,10,8) #ZW
wynik_ = c(29,38,9,12,9) #Wr
nazwy_ = c("PiS", "PO", "3D", "L", "Konf")
# ilosc_miejsc_ = 12 #ZW
ilosc_miejsc_ = 14 #ZWr
for (i in 1:100){
wynik_1 = wynik_ + rnorm(length(wynik_), sd = 1)
ww = ww %>%
bind_rows(dont(wynik = wynik_1,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_))
}
ww %>%
group_by(nazwy) %>%
summarise(sd = sd(n))
ww = tibble()
for (i in 1:100){
wynik_1 = wynik_ + rnorm(length(wynik_), sd = 0.5)
ww = ww %>%
bind_rows(dont(wynik = wynik_1,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_))
}
ww %>%
group_by(nazwy) %>%
summarise(sd = sd(n))
ww
ww = tibble()
for (i in 1:100){
wynik_1 = wynik_ + rnorm(length(wynik_), sd = 0.2)
ww = ww %>%
bind_rows(dont(wynik = wynik_1,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_))
}
ww %>%
group_by(nazwy) %>%
summarise(sd = sd(n))
ww = tibble()
for (i in 1:100){
wynik_1 = wynik_ + rnorm(length(wynik_), sd = 0.15)
ww = ww %>%
bind_rows(dont(wynik = wynik_1,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_))
}
ww %>%
group_by(nazwy) %>%
summarise(sd = sd(n))
ww = tibble()
for (i in 1:100){
wynik_1 = wynik_ + rnorm(length(wynik_), sd = 0.175)
ww = ww %>%
bind_rows(dont(wynik = wynik_1,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_))
}
ww %>%
group_by(nazwy) %>%
summarise(sd = sd(n))
ww %>%
group_by(nazwy) %>%
summarise(sd = sd(n),
max = max(n),
min = min(n))
ww %>%
group_by(nazwy) %>%
summarise(sd = sd(n),
max = max(n),
min = min(n),
mean = mean(n))
wynik_ = c(42,26,10,10,8) #ZW
# wynik_ = c(29,38,9,12,9) #Wr
nazwy_ = c("PiS", "PO", "3D", "L", "Konf")
ilosc_miejsc_ = 12 #ZW
ww = tibble()
for (i in 1:100){
wynik_1 = wynik_ + rnorm(length(wynik_), sd = 0.175)
ww = ww %>%
bind_rows(dont(wynik = wynik_1,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_))
}
ww %>%
group_by(nazwy) %>%
summarise(sd = sd(n),
max = max(n),
min = min(n),
mean = mean(n))
wynik_ = c(42,26,10,10,8) #ZW
# wynik_ = c(29,38,9,12,9) #Wr
nazwy_ = c("PiS", "PO", "3D", "L", "Konf")
ilosc_miejsc_ = 12 #ZW
ww = tibble()
for (i in 1:100){
wynik_1 = wynik_ + rnorm(length(wynik_), sd = 0.5)
ww = ww %>%
bind_rows(dont(wynik = wynik_1,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_))
}
ww %>%
group_by(nazwy) %>%
summarise(sd = sd(n),
max = max(n),
min = min(n),
mean = mean(n))
ww = tibble()
for (i in 1:100){
wynik_1 = wynik_ + rnorm(length(wynik_), sd = 0.75)
ww = ww %>%
bind_rows(dont(wynik = wynik_1,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_))
}
ww %>%
group_by(nazwy) %>%
summarise(sd = sd(n),
max = max(n),
min = min(n),
mean = mean(n))
ww = tibble()
for (i in 1:100){
wynik_1 = wynik_ + rnorm(length(wynik_), sd = 0.75)
ww = ww %>%
bind_rows(dont(wynik = wynik_1,
nazwy = nazwy_,
ilosc_miejsc = ilosc_miejsc_))
}
ww %>%
group_by(nazwy) %>%
summarise(sd = sd(n),
max = max(n),
min = min(n),
mean = mean(n))
rnorm(100, sd = 0.75)
abs(rnorm(100, sd = 0.75))
mean(abs(rnorm(100, sd = 0.75)))
mean(abs(rnorm(100, sd = 0.75)))/100
mean(abs(rnorm(10000, sd = 0.75)))/100
46,7*(mean(abs(rnorm(10000, sd = 0.175)))/100)
46.7*(mean(abs(rnorm(10000, sd = 0.175)))/100)
(mean(abs(rnorm(10000, sd = 0.175)))/100)
46.7*(mean(abs(rnorm(10000, sd = 0.175)))/100)
38.4*(mean(abs(rnorm(10000, sd = 0.75)))/100)
46.7*(mean(abs(rnorm(10000, sd = 0.175)))/100)
getwd()
setwd( "C:/Users/zymon/Desktop/Nauka/Repo z Learn/Learn/KNN/GAM/")
library(dplyr)
data = tibble(x_1 = rnorm(1000),
x_2 = rnorm(1000),
x_3 = rnorm(1000),
y = x_1 + x_2^2 + 3*x_3^3 + 10 + rnorm(1000, sd = 0.01))
install.packages("ggplot2")
library(ggplot2)
data %>%
ggplot()+
geom_point(mapping = aes(x=x_2, y = y ))
data %>%
ggplot()+
geom_point(mapping = aes(x=x_3, y = y ))
data %>%
ggplot()+
geom_point(mapping = aes(x=x_1, y = y ))
data = tibble(x_1 = rnorm(1000),
x_2 = rnorm(1000),
x_3 = rnorm(1000),
y = x_1 + x_2^2 + x_3^3 + 10 + rnorm(1000, sd = 0.01))
data %>%
ggplot()+
geom_point(mapping = aes(x=x_1, y = y ))
data %>%
ggplot()+
geom_point(mapping = aes(x=x_2, y = y ))
data %>%
ggplot()+
geom_point(mapping = aes(x=x_3, y = y ))
data = tibble(x_1 = rnorm(1000),
x_2 = rnorm(1000),
x_3 = rnorm(1000),
y = x_1 + x_2^2 + x_3^3/3 + 10 + rnorm(1000, sd = 0.01))
data %>%
ggplot()+
geom_point(mapping = aes(x=x_3, y = y ))
data %>%
ggplot()+
geom_point(mapping = aes(x=x_1, y = y ))
library(gam)
install.packages("gam")
library(gam)
gam_data = gam(y~poly(x_1, degree = 3)+
poly(x_2, degree = 3)+
poly(x_3, degree = 3))
gam_data = gam(y~poly(x_1, degree = 3)+
poly(x_2, degree = 3)+
poly(x_3, degree = 3),
data = data)
gam_data
summarise(gam_data)
summary(gam_data)
gam_data$model
gam_data$model$`poly(x_1, degree = 3)`
gam_data$family
gam_data$formula
gam_data$coefficients
gam_data$fitted.values
gam_data$effects
gam_data$model
tibble(gam_data$model)
data
gam_data$model
gam_data$fitted.values
predict(gam_data, data)
predict(gam_data, data) == gam_data$fitted.values
predict(gam_data, data) - gam_data$fitted.values
data %>%
mutate(pred_gam = predict(gam_data, data))
gam_data$contrasts
gam_data$coefficients
data[1]
data[1,]
data$x_1^2
data$x_1[1]
c(1,
data$x_1[1],
data$x_1^2[1],
data$x_1^3[1],
data$x_2[1],
data$x_2^2[1],
data$x_2^3[1],
data$x_3[1],
data$x_3^2[1],
data$x_3^3[1])
data$x_1[1]
c(1,
data$x_1[1],
data$x_1^2[1])
data$x_1^2[1]
data$x_1^2
data$x_1^2[1]
data$x_1[1]^2
c(1,
data$x_1[1],
data$x_1[1]^2,
data$x_1[1]^3,
data$x_2[1],
data$x_2[1]^2,
data$x_2[1]^3,
data$x_3[1],
data$x_3[1]^2,
data$x_3[1]^3)
c(1,
data$x_1[1],
data$x_1[1]^2,
data$x_1[1]^3,
data$x_2[1],
data$x_2[1]^2,
data$x_2[1]^3,
data$x_3[1],
data$x_3[1]^2,
data$x_3[1]^3)*gam_data$coefficients
sum(c(1,
data$x_1[1],
data$x_1[1]^2,
data$x_1[1]^3,
data$x_2[1],
data$x_2[1]^2,
data$x_2[1]^3,
data$x_3[1],
data$x_3[1]^2,
data$x_3[1]^3)*gam_data$coefficients)
sum(c(0,
data$x_1[1],
data$x_1[1]^2,
data$x_1[1]^3,
data$x_2[1],
data$x_2[1]^2,
data$x_2[1]^3,
data$x_3[1],
data$x_3[1]^2,
data$x_3[1]^3)*gam_data$coefficients)
library(ISLR)
fit2 = lm(wage~poly(age, 4, raw = TRUE), data = Wage)
gam_data = lm(y~poly(x_1, degree = 3)+
poly(x_2, degree = 3)+
poly(x_3, degree = 3),
data = data)
summary(gam_data)
gam_data
gam_data$coefficients
sum(c(1,
data$x_1[1],
data$x_1[1]^2,
data$x_1[1]^3,
data$x_2[1],
data$x_2[1]^2,
data$x_2[1]^3,
data$x_3[1],
data$x_3[1]^2,
data$x_3[1]^3)*gam_data$coefficients)
predict(gam_data, data)
data %>%
mutate(pred_gam = predict(gam_data, data))
gam_data$coefficients
library(dplyr)
library(ggplot2)
library(gam)
data = tibble(x_1 = rnorm(1000),
x_2 = rnorm(1000),
x_3 = rnorm(1000),
y = x_1 + x_2^2 + x_3^3/3 + 10 + rnorm(1000, sd = 0.01))
data %>%
ggplot()+
geom_point(mapping = aes(x=x_1, y = y ))
gam_data = lm(y~poly(x_1, degree = 3, raw = TRUE)+
poly(x_2, degree = 3, raw = TRUE)+
poly(x_3, degree = 3, raw = TRUE),
data = data)
summary(gam_data)
data %>%
mutate(pred_gam = predict(gam_data, data))
library(ISLR)
sum(c(1,
data$x_1[1],
data$x_1[1]^2,
data$x_1[1]^3,
data$x_2[1],
data$x_2[1]^2,
data$x_2[1]^3,
data$x_3[1],
data$x_3[1]^2,
data$x_3[1]^3)*gam_data$coefficients)
gam_data$coefficients
gam_data$effects
gam_data$effects
gam_data$xlevels
gam_data$call
gam_data$terms
gam_data$coefficients
gam_data$coefficients[1]
gam_data$coefficients[2]
# Expression or formula
f = expression(x^2 + 5*x + 1)
# Derivative
cat("Using deriv() function:\n")
print(deriv(f, "x"))
cat("\nUsing D() function:\n")
print(D(f, 'x'))
# Derivative
deriv_d =(deriv(f, "x"))
deriv_d
exp(ax+b) - 1 = 0
deriv_d.grad
# Expression or formula
f = expression(x^2 + 5*x + 1)
D(f, 'x')
der = D(f, 'x')
der
der[1]
der[0]
der[2]
der
gam_data$coefficients[1]
gam_data$coefficients[3]
# Expression or formula
f = expression(x*gam_data$coefficients[2] +
x^2*gam_data$coefficients[3]+
x^3*gam_data$coefficients[4])
der = D(f, 'x')
# Expression or formula
f = expression(x*gam_data$coefficients[2] +
x^2*gam_data$coefficients[3]+
x^3*gam_data$coefficients[4])
f
D(f, 'x')
gam_data$coefficients[2]
gam_data$coefficients[3]
gam_data$coefficients[4]
# Expression or formula
f = expression(x*0.9999551+#gam_data$coefficients[2] +
x^2*-2.042908e-05 +#gam_data$coefficients[3]+
x^3*0.0001288626 #gam_data$coefficients[4])
)
der = D(f, 'x')
der
