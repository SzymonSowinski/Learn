data$x_1[1]^3,
data$x_2[1],
data$x_2[1]^2,
data$x_2[1]^3,
data$x_3[1],
data$x_3[1]^2,
data$x_3[1]^3)*gam_data$coefficients)
gam_data$coefficients
gam_data$effects
gam_data$effects
gam_data$xlevels
gam_data$call
gam_data$terms
gam_data$coefficients
gam_data$coefficients[1]
gam_data$coefficients[2]
# Expression or formula
f = expression(x^2 + 5*x + 1)
# Derivative
cat("Using deriv() function:\n")
print(deriv(f, "x"))
cat("\nUsing D() function:\n")
print(D(f, 'x'))
# Derivative
deriv_d =(deriv(f, "x"))
deriv_d
exp(ax+b) - 1 = 0
deriv_d.grad
# Expression or formula
f = expression(x^2 + 5*x + 1)
D(f, 'x')
der = D(f, 'x')
der
der[1]
der[0]
der[2]
der
gam_data$coefficients[1]
gam_data$coefficients[3]
# Expression or formula
f = expression(x*gam_data$coefficients[2] +
x^2*gam_data$coefficients[3]+
x^3*gam_data$coefficients[4])
der = D(f, 'x')
# Expression or formula
f = expression(x*gam_data$coefficients[2] +
x^2*gam_data$coefficients[3]+
x^3*gam_data$coefficients[4])
f
D(f, 'x')
gam_data$coefficients[2]
gam_data$coefficients[3]
gam_data$coefficients[4]
# Expression or formula
f = expression(x*0.9999551+#gam_data$coefficients[2] +
x^2*-2.042908e-05 +#gam_data$coefficients[3]+
x^3*0.0001288626 #gam_data$coefficients[4])
)
der = D(f, 'x')
der
# Expression or formula
f = function (x)
{x*0.9999551+#gam_data$coefficients[2] +
x^2*-2.042908e-05 +#gam_data$coefficients[3]+
x^3*0.0001288626 #gam_data$coefficients[4])
}
f(0)
seq(0,100, 0.1)
f(seq(0,100, 0.1))
f(seq(0.1,100.1, 0.1)) - f(seq(0,100, 0.1))
abs(f(seq(0.1,100.1, 0.1)) - f(seq(0,100, 0.1)))
sum(abs(f(seq(0.1,100.1, 0.1)) - f(seq(0,100, 0.1))))
d =function(x, d ){
sum(abs(f(seq(d,x+d, d)) - f(seq(0,x, d))))
}
d(1)
d(1,0.001)
d(25,0.001)
d(1:12,0.001)
for (x in 1:10){d(x,0.001)}
c = c()
for (x in 1:10){c = c(c,d(x,0.001))}
c
1:10:0.1
1:0.1:10
0.1:10
0.1:10:0.1
0.1:10
0.1:0.1:10
1:10/10
ggplot()+
geom_line(mapping = aes(x = 1:100/10,
y = f(1:100/10)))
tibble() %>%
mutate(x = 1:100/10) %>%
mutate(y = f(x))
library(dplyr)
library(ggplot2)
library(gam)
tibble() %>%
mutate(x = 1:100/10) %>%
mutate(y = f(x))
tibble() %>%
mutate(x = 1:100) %>%
mutate(y = f(x))
tibble() %>%
mutate(x = 1:100)
tibble(x = 1:100) %>%
mutate(y = f(x))
tibble(x = seq(0,100,0.1)) %>%
mutate(y = f(x))
tibble(x = seq(0,100,0.1)) %>%
mutate(y = f(x)) %>%
ggplot()+
geom_line(mapping = aes(x = x,
y = y))
# Expression or formula
f = function (x)
{x+#gam_data$coefficients[2] +
x^2*(-2) +#gam_data$coefficients[3]+
x^3*6 #gam_data$coefficients[4])
}
tibble(x = seq(0,100,0.1)) %>%
mutate(y = f(x)) %>%
ggplot()+
geom_line(mapping = aes(x = x,
y = y))
tibble(x = seq(-10,100,0.1)) %>%
mutate(y = f(x)) %>%
ggplot()+
geom_line(mapping = aes(x = x,
y = y))
tibble(x = seq(-100,100,0.1)) %>%
mutate(y = f(x)) %>%
ggplot()+
geom_line(mapping = aes(x = x,
y = y))
# Expression or formula
f = function (x)
{x+#gam_data$coefficients[2] +
x^2*(-7) +#gam_data$coefficients[3]+
x^3*6 #gam_data$coefficients[4])
}
tibble(x = seq(-100,100,0.1)) %>%
mutate(y = f(x)) %>%
ggplot()+
geom_line(mapping = aes(x = x,
y = y))
# Expression or formula
f = function (x)
{x+#gam_data$coefficients[2] +
x^2*(-70) +#gam_data$coefficients[3]+
x^3*6 #gam_data$coefficients[4])
}
tibble(x = seq(-100,100,0.1)) %>%
mutate(y = f(x)) %>%
ggplot()+
geom_line(mapping = aes(x = x,
y = y))
# Expression or formula
f = function (x)
{(-20)*x+#gam_data$coefficients[2] +
x^2*(-70) +#gam_data$coefficients[3]+
x^3*6 #gam_data$coefficients[4])
}
tibble(x = seq(-100,100,0.1)) %>%
mutate(y = f(x)) %>%
ggplot()+
geom_line(mapping = aes(x = x,
y = y))
ply = tibble(x = seq(-100,100,0.1)) %>%
mutate(y = f(x)) %>%
ggplot()+
geom_line(mapping = aes(x = x,
y = y))
ggplotly(ply)
library(plotly)
install.packages("plotly")
# Expression or formula
f = function (x)
{(-20)*x+#gam_data$coefficients[2] +
x^2*(-70) +#gam_data$coefficients[3]+
x^3*6 #gam_data$coefficients[4])
}
ply = tibble(x = seq(-100,100,0.1)) %>%
mutate(y = f(x)) %>%
ggplot()+
geom_line(mapping = aes(x = x,
y = y))
ggplotly(ply)
library(plotly)
ggplotly(ply)
# Expression or formula
f = function (x)
{(-20)*x+#gam_data$coefficients[2] +
# x^2*(-70) +#gam_data$coefficients[3]+
x^3*6 #gam_data$coefficients[4])
}
ply = tibble(x = seq(-100,100,0.1)) %>%
mutate(y = f(x)) %>%
ggplot()+
geom_line(mapping = aes(x = x,
y = y))
ggplotly(ply)
# Expression or formula
f = function (x)
{(-20)*x+#gam_data$coefficients[2] +
x^2*(-70) +#gam_data$coefficients[3]+
x^3*6 #gam_data$coefficients[4])
}
ply = tibble(x = seq(-10,10,0.1)) %>%
mutate(y = f(x)) %>%
ggplot()+
geom_line(mapping = aes(x = x,
y = y))
ggplotly(ply)
# Expression or formula
f = function (x)
{(-20)*x+#gam_data$coefficients[2] +
x^2*(-70) +#gam_data$coefficients[3]+
x^3*6 #gam_data$coefficients[4])
}
ply = tibble(x = seq(-5,20,0.1)) %>%
mutate(y = f(x)) %>%
ggplot()+
geom_line(mapping = aes(x = x,
y = y))
ggplotly(ply)
d =function(x, d ){
sum(abs(f(seq(d,x+d, d)) - f(seq(0,x, d))))
}
ply = tibble(x = seq(-5,15,0.1)) %>%
mutate(y = f(x)) %>%
ggplot()+
geom_line(mapping = aes(x = x,
y = y))
ggplotly(ply)
ply = tibble(x = seq(-5,15,0.1)) %>%
mutate(y = f(x)) %>%
mutate(yy = d(x)) %>%
ggplot()+
geom_line(mapping = aes(x = x,
y = y))
tmp = tibble(x = seq(-5,15,0.1)) %>%
mutate(y = f(x)) %>%
mutate(yy = d(x))
ply = tmp%>%
ggplot()+
geom_line(mapping = aes(x = x,
y = y))
ggplotly(ply)
tmp = tibble(x = seq(-5,15,0.1)) %>%
mutate(y = f(x))
ply = tmp%>%
ggplot()+
geom_line(mapping = aes(x = x,
y = y))
ggplotly(ply)
for (x in tmp$x){c = c(c,d(x,0.001))}
c = c()
for (x in tmp$x){c = c(c,d(x,0.001))}
c = c()
for (w in tmp$x){c = c(c,d(w,0.001))}
d(5,0.001)
tmp = tibble(x = seq(0,15,0.1)) %>%
mutate(y = f(x))
ply = tmp%>%
ggplot()+
geom_line(mapping = aes(x = x,
y = y))
ggplotly(ply)
c = c()
for (w in tmp$x){c = c(c,d(w,0.001))}
c
tmp =tmp %>%
mutate(yy = c)
ply = tmp%>%
ggplot()+
geom_line(mapping = aes(x = x,
y = y))
ggplotly(ply)
ply = tmp%>%
ggplot()+
geom_line(mapping = aes(x = x,
y = y))+
geom_line(mapping = aes(x = x,
y = yy))
ggplotly(ply)
d =function(x, y){
sum(abs(f(seq(y+d,x+d, d)) - f(seq(y,x, d))))
}
d(5,10)
d =function(x, y, d = 0.001){
sum(abs(f(seq(y+d,x+d, d)) - f(seq(y,x, d))))
}
d(5,10)
d =function(y, x, d = 0.001){
sum(abs(f(seq(y+d,x+d, d)) - f(seq(y,x, d))))
}
d(5,10)
f(5)
f(10)
f(7.9)
abs(f(5)-f(7.9))+abs(f(7.9) - f(10))
gam_data
library(dplyr)
library(ggplot2)
library(gam)
library(plotly)
data = tibble(x_1 = rnorm(1000),
x_2 = rnorm(1000),
x_3 = rnorm(1000),
y = x_1 + x_2^2 + x_3^3/3 + 10 + rnorm(1000, sd = 0.01))
data %>%
ggplot()+
geom_point(mapping = aes(x=x_1, y = y ))
gam_data = lm(y~poly(x_1, degree = 3, raw = TRUE)+
poly(x_2, degree = 3, raw = TRUE)+
poly(x_3, degree = 3, raw = TRUE),
data = data)
gam_data
data
data[1]
data[1,]
data[1,-1]
data[1,-4]
predict(gam_data, data[1,-4])
data[1:2,-4]
predict(gam_data, data[1:2,-4])
tmp = data[1:2,-4]
tmp
tmp[1]
tmp[1][1]
tmp[1,1]
tmp[1,2]
seq(tmp[1,1],tmp[1,2],0.01)
tmp[1,1]
tmp[1,2]
seq(tmp[1,1],tmp[1,2],0.01)
tmp$x_1[1]
seq(tmp$x_1[1],tmp$x_1[2],0.01)
seq(tmp$x_1[1],tmp$x_1[2],0.01)
seq(tmp$x_2[1],tmp$x_2[2],0.01)
seq(tmp$x_2[1],tmp$x_2[2],0.01)
tmp$x_2[1]
tmp$x_2[2]
sng(tmp$x_2[1]-tmp$x_2[2])
sign(tmp$x_2[1]-tmp$x_2[2])
sign(tmp$x_2[2]-tmp$x_2[1])
seq(tmp$x_1[1],tmp$x_1[2],0.01*sign(tmp$x_1[2]-tmp$x_1[1]))
seq(tmp$x_2[1],tmp$x_2[2],0.01*sign(tmp$x_2[2]-tmp$x_2[1]))
seq(tmp$x_3[1],tmp$x_3[2],0.01*sign(tmp$x_3[2]-tmp$x_3[1]))
length(xx_1)
length(xx_2)
xx_1 = seq(tmp$x_1[1],tmp$x_1[2],0.01*sign(tmp$x_1[2]-tmp$x_1[1]))
xx_2 = seq(tmp$x_2[1],tmp$x_2[2],0.01*sign(tmp$x_2[2]-tmp$x_2[1]))
xx_3 = seq(tmp$x_3[1],tmp$x_3[2],0.01*sign(tmp$x_3[2]-tmp$x_3[1]))
length(xx_1)
length(xx_2)
length(xx_3)
max_len = max(length(xx_1),
length(xx_2),
length(xx_3))
max_len
round(max_len/length(xx_1) )
rep(1,2)
rep(xx_1, round(max_len/length(xx_1) ))
rep(xx_2, round(max_len/length(xx_2) ))
round(max_len/length(xx_2) )
max_len/length(xx_2)
rep(xx_1, round(max_len/length(xx_1)-0.5 ))
rep(xx_2, round(max_len/length(xx_2)-0.5 ))
rep(xx_1, round(max_len/length(xx_1)-0.5 ))
sample(xx_1, size = max_len-length(xx_1_r))
xx_1 = seq(tmp$x_1[1],tmp$x_1[2],0.01*sign(tmp$x_1[2]-tmp$x_1[1]))
xx_2 = seq(tmp$x_2[1],tmp$x_2[2],0.01*sign(tmp$x_2[2]-tmp$x_2[1]))
xx_3 = seq(tmp$x_3[1],tmp$x_3[2],0.01*sign(tmp$x_3[2]-tmp$x_3[1]))
max_len = max(length(xx_1),
length(xx_2),
length(xx_3))
xx_1_r = rep(xx_1, round(max_len/length(xx_1)-0.5 ))
xx_2_r = rep(xx_2, round(max_len/length(xx_2)-0.5 ))
xx_3_r = rep(xx_3, round(max_len/length(xx_3)-0.5 ))
sample(xx_1, size = max_len-length(xx_1_r))
sort(c(xx_3_r, sample(xx_3, size = max_len-length(xx_3_r))))
sort(c(xx_1_r, sample(xx_1, size = max_len-length(xx_1_r))))
colnames(data)
tibble(x_1 =sort(c(xx_1_r, sample(xx_1, size = max_len-length(xx_1_r)))),
x_2 =sort(c(xx_2_r, sample(xx_2, size = max_len-length(xx_2_r)))),
x_3 =sort(c(xx_3_r, sample(xx_3, size = max_len-length(xx_3_r)))))
tmp = tibble(x_1 =sort(c(xx_1_r, sample(xx_1, size = max_len-length(xx_1_r)))),
x_2 =sort(c(xx_2_r, sample(xx_2, size = max_len-length(xx_2_r)))),
x_3 =sort(c(xx_3_r, sample(xx_3, size = max_len-length(xx_3_r)))))
predict(gam_data, tmp)
plot(predict(gam_data, tmp))
tmp
(predict(gam_data, tmp))
lag(predict(gam_data, tmp))
p-lag(p)
p = predict(gam_data, tmp)
p-lag(p)
abs(p-lag(p))
sum(abs(p-lag(p)))
sum(abs(p-lag(p)), na.rm = T)
data[1:2]
data[1:2,]
12.6-9.96
sum(abs(p-lag(p)), na.rm = T)
p
tmp = data[1:2,-4]
predict(gam_data, data[1:2,-4])
xx_1 = seq(tmp$x_1[1],tmp$x_1[2],0.01*sign(tmp$x_1[2]-tmp$x_1[1]))
xx_2 = seq(tmp$x_2[1],tmp$x_2[2],0.01*sign(tmp$x_2[2]-tmp$x_2[1]))
xx_3 = seq(tmp$x_3[1],tmp$x_3[2],0.01*sign(tmp$x_3[2]-tmp$x_3[1]))
max_len = max(length(xx_1),
length(xx_2),
length(xx_3))
xx_1_r = rep(xx_1, round(max_len/length(xx_1)-0.5 ))
xx_2_r = rep(xx_2, round(max_len/length(xx_2)-0.5 ))
xx_3_r = rep(xx_3, round(max_len/length(xx_3)-0.5 ))
colnames(data)
tmp = tibble(x_1 =sort(c(xx_1_r, sample(xx_1, size = max_len-length(xx_1_r))),
decreasing = (sign(tmp$x_1[2]-tmp$x_1[1])==1)),
x_2 =sort(c(xx_2_r, sample(xx_2, size = max_len-length(xx_2_r))),
decreasing = (sign(tmp$x_2[2]-tmp$x_2[1])==1)),
x_3 =sort(c(xx_3_r, sample(xx_3, size = max_len-length(xx_3_r))),
decreasing = (sign(tmp$x_3[2]-tmp$x_3[1])==1)))
p = predict(gam_data, tmp)
p
tmp
data[1:2,-4]
tmp = data[1:2,-4]
predict(gam_data, data[1:2,-4])
xx_1 = seq(tmp$x_1[1],tmp$x_1[2],0.01*sign(tmp$x_1[2]-tmp$x_1[1]))
xx_2 = seq(tmp$x_2[1],tmp$x_2[2],0.01*sign(tmp$x_2[2]-tmp$x_2[1]))
xx_3 = seq(tmp$x_3[1],tmp$x_3[2],0.01*sign(tmp$x_3[2]-tmp$x_3[1]))
max_len = max(length(xx_1),
length(xx_2),
length(xx_3))
xx_1_r = rep(xx_1, round(max_len/length(xx_1)-0.5 ))
xx_2_r = rep(xx_2, round(max_len/length(xx_2)-0.5 ))
xx_3_r = rep(xx_3, round(max_len/length(xx_3)-0.5 ))
colnames(data)
tmp = tibble(x_1 =sort(c(xx_1_r, sample(xx_1, size = max_len-length(xx_1_r))),
decreasing = (sign(tmp$x_1[2]-tmp$x_1[1])==1)),
x_2 =sort(c(xx_2_r, sample(xx_2, size = max_len-length(xx_2_r))),
decreasing = (sign(tmp$x_2[2]-tmp$x_2[1])==1)),
x_3 =sort(c(xx_3_r, sample(xx_3, size = max_len-length(xx_3_r))),
decreasing = (sign(tmp$x_3[2]-tmp$x_3[1])==1)))
p = predict(gam_data, tmp)
sum(abs(p-lag(p)), na.rm = T)
12.6-9.96
plot(p)
data[1:2,-4]
tmp = tibble(x_1 = c(1,1),
x_2 = c(1,1),
x_3 = c(-5,5))
tmp
predict(gam_data, tmp)
xx_1 = seq(tmp$x_1[1],tmp$x_1[2],0.01*sign(tmp$x_1[2]-tmp$x_1[1]))
xx_2 = seq(tmp$x_2[1],tmp$x_2[2],0.01*sign(tmp$x_2[2]-tmp$x_2[1]))
xx_3 = seq(tmp$x_3[1],tmp$x_3[2],0.01*sign(tmp$x_3[2]-tmp$x_3[1]))
max_len = max(length(xx_1),
length(xx_2),
length(xx_3))
xx_1_r = rep(xx_1, round(max_len/length(xx_1)-0.5 ))
xx_2_r = rep(xx_2, round(max_len/length(xx_2)-0.5 ))
xx_3_r = rep(xx_3, round(max_len/length(xx_3)-0.5 ))
colnames(data)
tmp = tibble(x_1 =sort(c(xx_1_r, sample(xx_1, size = max_len-length(xx_1_r))),
decreasing = (sign(tmp$x_1[2]-tmp$x_1[1])==1)),
x_2 =sort(c(xx_2_r, sample(xx_2, size = max_len-length(xx_2_r))),
decreasing = (sign(tmp$x_2[2]-tmp$x_2[1])==1)),
x_3 =sort(c(xx_3_r, sample(xx_3, size = max_len-length(xx_3_r))),
decreasing = (sign(tmp$x_3[2]-tmp$x_3[1])==1)))
p = predict(gam_data, tmp)
sum(abs(p-lag(p)), na.rm = T)
data[1:2,]
tmp
predict(gam_data, tmp)
plot(p)
tmp = data[1:2,-4]
tmp = tibble(x_1 = c(1,1),
x_2 = c(-5,5),
x_3 = c(1,1),)
predict(gam_data, tmp)
xx_1 = seq(tmp$x_1[1],tmp$x_1[2],0.01*sign(tmp$x_1[2]-tmp$x_1[1]))
xx_2 = seq(tmp$x_2[1],tmp$x_2[2],0.01*sign(tmp$x_2[2]-tmp$x_2[1]))
xx_3 = seq(tmp$x_3[1],tmp$x_3[2],0.01*sign(tmp$x_3[2]-tmp$x_3[1]))
max_len = max(length(xx_1),
length(xx_2),
length(xx_3))
xx_1_r = rep(xx_1, round(max_len/length(xx_1)-0.5 ))
xx_2_r = rep(xx_2, round(max_len/length(xx_2)-0.5 ))
xx_3_r = rep(xx_3, round(max_len/length(xx_3)-0.5 ))
colnames(data)
tmp = tibble(x_1 =sort(c(xx_1_r, sample(xx_1, size = max_len-length(xx_1_r))),
decreasing = (sign(tmp$x_1[2]-tmp$x_1[1])==1)),
x_2 =sort(c(xx_2_r, sample(xx_2, size = max_len-length(xx_2_r))),
decreasing = (sign(tmp$x_2[2]-tmp$x_2[1])==1)),
x_3 =sort(c(xx_3_r, sample(xx_3, size = max_len-length(xx_3_r))),
decreasing = (sign(tmp$x_3[2]-tmp$x_3[1])==1)))
p = predict(gam_data, tmp)
sum(abs(p-lag(p)), na.rm = T)
tmp
plot(p)
tmp = tibble(x_1 = c(1,1),
x_2 = c(-5,5),
x_3 = c(1,1),)
predict(gam_data, tmp)
36.35852 - 36.31739
sum(abs(p-lag(p)), na.rm = T)
